<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<configuration>
<!--Property 標籤的主要功能是用於定義可能會常態性地出現的參數設置或常量值。
它本身並不具有直接功能，而是為了讓你在配置文件中定義這些參數或常量，以便在其他地方引用和復用。-->
    <Properties>
        <!-- 日誌輸出級別 -->
        <Property name="LOG_INFO_LEVEL" value="info"/>
        <!-- error級別日誌 -->
        <Property name="LOG_ERROR_LEVEL" value="error"/>
        <!-- 在當前目錄下創建名為log目錄做日誌存放的目錄 -->
        <Property name="LOG_HOME" value="./log"/>
        <!-- 日誌文件大小，超過這個大小將被壓縮 -->
        <Property name="LOG_MAX_SIZE" value="100 MB"/>
        <!-- 保留多少天以内的日志 -->
        <Property name="LOG_DAYS" value="15"/>
        <!--輸出日誌的格式：%d表示日期，%thread表示線程名，%-5level：級別從左顯示5個字符寬度， %msg：日誌消息，%n是換行符 -->
        <Property name="LOG_PATTERN" value="%d [%t] %-5level %logger{0} - %msg%n"/>
    </Properties>

    <appenders>
        <!--        SYSTEM_OUT：將日誌消息輸出到標準輸出流（通常是控制台）。 SYSTEM_ERR：將日誌消息輸出到標準錯誤流（通常是控制台的錯誤輸出）。 SYSTEM_LOG：將日誌消息輸出到系統日誌（通常是操作系統的日誌記錄器）。 文件路徑：將日誌消息輸出到指定的文件路徑，例如 target="logs/mylog.log"。-->
        <console name="Console" target="SYSTEM_OUT">
            <Filters>
                <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </console>

        <!--文件會打印出所有信息，這個log每次運行程序會自動清空，由append=false屬性決定，這個也挺有用的，適合臨時測試用(專案目錄下)-->
        <File name="log" fileName="log/test.log" append="false">
            <patternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} [%l] %-5level-%msg%n"/>
        </File>
        <RollingFile name="RollingFileInfo" fileName="${sys:user.home}/logs/hpaasvc/sessionLogout.log"
                     filePattern="${sys:user.home}/logs/hpaasvc/$${date:yyyy-MM}/sessionLogout.log.%d{yyyyMMdd}-%i.log">
            <Filters>
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <!-- 設置日誌保留天數 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
<!--                允許你設置日誌文件的大小上限，當日誌文件達到指定的大小時，會觸發滾動，生成新的日誌文件，以便更好地管理和歸檔日誌。-->
                <!--<SizeBasedTriggeringPolicy size="100 MB"/>-->
            </Policies>

            <!-- 設置最多保留的日誌文件個數，這裡設置為5 -->
            <DefaultRolloverStrategy max="5">
<!--                如果你設置 maxDepth="1"，那麼刪除操作將僅在 logs 目錄中進行，不會進入更深層次的子目錄。如果設置 maxDepth="2"，那麼刪除操作將在 logs 目錄及其一級子目錄中進行，不會進入更深層次的子目錄。-->
                <Delete basePath="${log-path}" maxDepth="1">
                    <IfFileName glob="app-*.log" />
<!--                    表示只刪除最後修改時間在 1 天前的日誌文件。也就是說，只刪除一天前的舊日誌文件，保留較新的日誌。-->
                    <IfLastModified age="1d" />
                </Delete>
            </DefaultRolloverStrategy>

        </RollingFile>


    </appenders>
    <loggers>
        <Logger name="com.eland.webtraining.webAdvanced.logoutListener" level="DEBUG" additivity="true">
            <AppenderRef ref="RollingFileInfo"/>
        </Logger>
        <root level="ALL">
            <appender-ref ref="Console"/>
            <AppenderRef ref="log" />
        </root>
    </loggers>
</configuration>

<!--        onMatch：當日誌消息滿足過濾條件時，即日誌級別等於或高於指定的 level 值（在這裡是 DEBUG），會執行 onMatch 中定義的行為。在這裡設置為 ACCEPT，表示接受該條日誌消息，將其輸出到對應的 Appender。-->
<!--        onMismatch：當日誌消息不滿足過濾條件時，即日誌級別低於指定的 level 值，會執行 onMismatch 中定義的行為。在這裡設置為 NEUTRAL，表示中立態度，不對日誌消息進行任何處理，繼續傳遞給其他過濾器或 Appender 進行處理。-->